{"mappings":"ACCA,MAAM,EAAgB,SAAS,aAAa,CAAC,sBACvC,EAAoB,SAAS,aAAa,CAAC,oBAC3C,EAAS,SAAS,aAAa,CAAC,sBACtC,IAAI,EAAS,KACT,EAAS,IACT,EAAgB,KAepB,SAAS,EAAS,CAAQ,EACxB,IAAM,EAAM,WAAW,GAEvB,GAAI,AAAW,OAAX,EACF,OAAQ,GACN,IAAK,WACH,GAAU,EACV,KACF,KAAK,iBACH,GAAU,EACV,KACF,KAAK,WACH,GAAU,EACV,KACF,KAAK,cACH,GAAU,CAEd,MAEA,EAAS,EAGX,EAAgB,EAChB,EAAS,GACX,CAEA,EAAO,gBAAgB,CAAC,QAAS,SAAU,CAAK,MAtC1C,EAuCJ,IAAM,EAAS,EAAM,MAAM,CACrB,EAAa,EAAO,SAAS,CAE/B,EAAW,QAAQ,CAAC,WAAa,EAAO,MAAM,CAAG,GACnD,CAAA,EAAS,AAAW,MAAX,GAAmB,EAAO,QAAQ,CAAC,KAEtC,EAAS,EAAO,WAAW,CAD3B,EAAO,WAAW,AACF,EAGpB,EAAW,QAAQ,CAAC,YAAc,CAAC,EAAO,QAAQ,CAAC,MACrD,CAAA,GAAU,GADZ,EAII,EAAW,QAAQ,CAAC,SAAY,CAAA,AAAW,MAAX,GAAkB,EAAO,QAAQ,CAAC,IAAA,GACpE,CAAA,GAAU,EAAO,WAAW,AAAX,EAGf,EAAW,QAAQ,CAAC,QACtB,EAAS,IACT,EAAS,KACT,EAAgB,MAGd,EAAW,QAAQ,CAAC,OAAS,AAAW,MAAX,GAC/B,CAAA,EAAS,AAAC,CAAA,CAAC,WAAW,EAAA,EAAS,QAAQ,EADzC,EAII,EAAW,QAAQ,CAAC,cAEtB,AADkB,SAAS,gBAAgB,CAAC,aAClC,OAAO,CAAC,AAAA,GAAY,EAAS,SAAS,CAAC,MAAM,CAAC,oBACxD,EAAO,SAAS,CAAC,GAAG,CAAC,mBAErB,EAAS,EAAO,OAAO,CAAC,SAAS,GAG/B,EAAW,QAAQ,CAAC,UAAY,AAAW,OAAX,GAAmB,AAAkB,OAAlB,IAErD,AADkB,SAAS,gBAAgB,CAAC,aAClC,OAAO,CAAC,AAAA,GAAY,EAAS,SAAS,CAAC,MAAM,CAAC,oBAExD,EAAS,SA3ET,EADE,AAAW,OAAX,EACiB,EAAS,GAAM,EAAI,EAAO,OAAO,CAAC,GAAK,EAAO,QAAQ,GAEtD,IAGrB,EAAc,WAAW,CAAG,EAC5B,EAAkB,WAAW,CAAG,CAyElC","sources":["<anon>","src/app.js"],"sourcesContent":["\"use strict\";\nconst resultDisplay = document.querySelector(\".secondary-display\");\nconst operationsDisplay = document.querySelector(\".primary-display\");\nconst numpad = document.querySelector(\".buttons-container\");\nlet buffer = null;\nlet number = \"0\";\nlet prevOperation = null;\nfunction render() {\n    let normalisedNumber;\n    if (buffer !== null) normalisedNumber = buffer % 1 !== 0 ? buffer.toFixed(2) : buffer.toString();\n    else normalisedNumber = \"0\";\n    resultDisplay.textContent = normalisedNumber;\n    operationsDisplay.textContent = number;\n}\nfunction evaluate(operator) {\n    const num = parseFloat(number);\n    if (buffer !== null) switch(prevOperation){\n        case \"division\":\n            buffer /= num;\n            break;\n        case \"multiplication\":\n            buffer *= num;\n            break;\n        case \"addition\":\n            buffer += num;\n            break;\n        case \"subtraction\":\n            buffer -= num;\n            break;\n    }\n    else buffer = num;\n    prevOperation = operator;\n    number = \"0\";\n}\nnumpad.addEventListener(\"click\", function(event) {\n    const target = event.target;\n    const buttonType = target.classList;\n    if (buttonType.contains(\"number\") && number.length < 7) number = number === \"0\" && !number.includes(\".\") ? target.textContent : number + target.textContent;\n    if (buttonType.contains(\"decimal\") && !number.includes(\".\")) number += \".\";\n    if (buttonType.contains(\"zero\") && (number !== \"0\" || number.includes(\".\"))) number += target.textContent;\n    if (buttonType.contains(\"ac\")) {\n        number = \"0\";\n        buffer = null;\n        prevOperation = null;\n    }\n    if (buttonType.contains(\"pm\") && number !== \"0\") number = (-parseFloat(number)).toString();\n    if (buttonType.contains(\"operator\")) {\n        const operators = document.querySelectorAll(\".operator\");\n        operators.forEach((operator)=>operator.classList.remove(\"operator-active\"));\n        target.classList.add(\"operator-active\");\n        evaluate(target.dataset.operation);\n    }\n    if (buttonType.contains(\"equal\") && buffer !== null && prevOperation !== null) {\n        const operators = document.querySelectorAll(\".operator\");\n        operators.forEach((operator)=>operator.classList.remove(\"operator-active\"));\n        evaluate(\"null\");\n    }\n    render();\n});\n\n//# sourceMappingURL=index.a5b0f432.js.map\n","'use strict';\nconst resultDisplay = document.querySelector('.secondary-display');\nconst operationsDisplay = document.querySelector('.primary-display');\nconst numpad = document.querySelector('.buttons-container');\nlet buffer = null;\nlet number = '0';\nlet prevOperation = null;\n\nfunction render() {\n  let normalisedNumber;\n\n  if (buffer !== null) {\n    normalisedNumber = buffer % 1 !== 0 ? buffer.toFixed(2) : buffer.toString();\n  } else {\n    normalisedNumber = '0';\n  }\n\n  resultDisplay.textContent = normalisedNumber;\n  operationsDisplay.textContent = number;\n}\n\nfunction evaluate(operator) {\n  const num = parseFloat(number);\n\n  if (buffer !== null) {\n    switch (prevOperation) {\n      case 'division':\n        buffer /= num;\n        break;\n      case 'multiplication':\n        buffer *= num;\n        break;\n      case 'addition':\n        buffer += num;\n        break;\n      case 'subtraction':\n        buffer -= num;\n        break;\n    }\n  } else {\n    buffer = num;\n  }\n\n  prevOperation = operator;\n  number = '0';\n}\n\nnumpad.addEventListener('click', function (event) {\n  const target = event.target;\n  const buttonType = target.classList;\n\n  if (buttonType.contains('number') && number.length < 7) {\n    number = number === '0' && !number.includes('.')\n        ? target.textContent\n        : number + target.textContent;\n  }\n\n  if (buttonType.contains('decimal') && !number.includes('.')) {\n    number += '.';\n  }\n\n  if (buttonType.contains('zero') && (number !== '0' || number.includes('.'))) {\n    number += target.textContent;\n  }\n\n  if (buttonType.contains('ac')) {\n    number = '0';\n    buffer = null;\n    prevOperation = null;\n  }\n\n  if (buttonType.contains('pm') && number !== '0') {\n    number = (-parseFloat(number)).toString();\n  }\n\n  if (buttonType.contains('operator')) {\n    const operators = document.querySelectorAll('.operator');\n    operators.forEach(operator => operator.classList.remove('operator-active'));\n    target.classList.add('operator-active');\n\n    evaluate(target.dataset.operation);\n  }\n\n  if (buttonType.contains('equal') && buffer !== null && prevOperation !== null) {\n    const operators = document.querySelectorAll('.operator');\n    operators.forEach(operator => operator.classList.remove('operator-active'));\n\n    evaluate('null');\n  }\n\n  render();\n})\n"],"names":["resultDisplay","document","querySelector","operationsDisplay","numpad","buffer","number","prevOperation","evaluate","operator","num","parseFloat","addEventListener","event","normalisedNumber","target","buttonType","classList","contains","length","includes","textContent","toString","operators","querySelectorAll","forEach","remove","add","dataset","operation","toFixed"],"version":3,"file":"index.a5b0f432.js.map"}